//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5446
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace KM.PrintJSD {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ImportDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ImportDataSet : global::System.Data.DataSet {
        
        private 结帐明细表DataTable table结帐明细表;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ImportDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ImportDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["结帐明细表"] != null)) {
                    base.Tables.Add(new 结帐明细表DataTable(ds.Tables["结帐明细表"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 结帐明细表DataTable 结帐明细表 {
            get {
                return this.table结帐明细表;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ImportDataSet cln = ((ImportDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["结帐明细表"] != null)) {
                    base.Tables.Add(new 结帐明细表DataTable(ds.Tables["结帐明细表"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.table结帐明细表 = ((结帐明细表DataTable)(base.Tables["结帐明细表"]));
            if ((initTable == true)) {
                if ((this.table结帐明细表 != null)) {
                    this.table结帐明细表.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ImportDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ImportDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.table结帐明细表 = new 结帐明细表DataTable();
            base.Tables.Add(this.table结帐明细表);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize结帐明细表() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ImportDataSet ds = new ImportDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void 结帐明细表RowChangeEventHandler(object sender, 结帐明细表RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 结帐明细表DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn column序号;
            
            private global::System.Data.DataColumn column公司名称;
            
            private global::System.Data.DataColumn column车主姓名;
            
            private global::System.Data.DataColumn column车牌号;
            
            private global::System.Data.DataColumn column票款合计;
            
            private global::System.Data.DataColumn column其它收入;
            
            private global::System.Data.DataColumn column代理费;
            
            private global::System.Data.DataColumn column卸载;
            
            private global::System.Data.DataColumn column违约甲;
            
            private global::System.Data.DataColumn column违约乙;
            
            private global::System.Data.DataColumn column快件;
            
            private global::System.Data.DataColumn column其它1;
            
            private global::System.Data.DataColumn column其它2;
            
            private global::System.Data.DataColumn column其它3;
            
            private global::System.Data.DataColumn column实结金额;
            
            private global::System.Data.DataColumn column大写金额;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 结帐明细表DataTable() {
                this.TableName = "结帐明细表";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 结帐明细表DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 结帐明细表DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 序号Column {
                get {
                    return this.column序号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 公司名称Column {
                get {
                    return this.column公司名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 车主姓名Column {
                get {
                    return this.column车主姓名;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 车牌号Column {
                get {
                    return this.column车牌号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 票款合计Column {
                get {
                    return this.column票款合计;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 其它收入Column {
                get {
                    return this.column其它收入;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 代理费Column {
                get {
                    return this.column代理费;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 卸载Column {
                get {
                    return this.column卸载;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 违约甲Column {
                get {
                    return this.column违约甲;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 违约乙Column {
                get {
                    return this.column违约乙;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 快件Column {
                get {
                    return this.column快件;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 其它1Column {
                get {
                    return this.column其它1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 其它2Column {
                get {
                    return this.column其它2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 其它3Column {
                get {
                    return this.column其它3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 实结金额Column {
                get {
                    return this.column实结金额;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 大写金额Column {
                get {
                    return this.column大写金额;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 结帐明细表Row this[int index] {
                get {
                    return ((结帐明细表Row)(this.Rows[index]));
                }
            }
            
            public event 结帐明细表RowChangeEventHandler 结帐明细表RowChanging;
            
            public event 结帐明细表RowChangeEventHandler 结帐明细表RowChanged;
            
            public event 结帐明细表RowChangeEventHandler 结帐明细表RowDeleting;
            
            public event 结帐明细表RowChangeEventHandler 结帐明细表RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add结帐明细表Row(结帐明细表Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 结帐明细表Row Add结帐明细表Row(
                        string 序号, 
                        string 公司名称, 
                        string 车主姓名, 
                        string 车牌号, 
                        string 票款合计, 
                        string 其它收入, 
                        string 代理费, 
                        string 卸载, 
                        string 违约甲, 
                        string 违约乙, 
                        string 快件, 
                        string 其它1, 
                        string 其它2, 
                        string 其它3, 
                        string 实结金额, 
                        string 大写金额) {
                结帐明细表Row row结帐明细表Row = ((结帐明细表Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        序号,
                        公司名称,
                        车主姓名,
                        车牌号,
                        票款合计,
                        其它收入,
                        代理费,
                        卸载,
                        违约甲,
                        违约乙,
                        快件,
                        其它1,
                        其它2,
                        其它3,
                        实结金额,
                        大写金额};
                row结帐明细表Row.ItemArray = columnValuesArray;
                this.Rows.Add(row结帐明细表Row);
                return row结帐明细表Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                结帐明细表DataTable cln = ((结帐明细表DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 结帐明细表DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column序号 = base.Columns["序号"];
                this.column公司名称 = base.Columns["公司名称"];
                this.column车主姓名 = base.Columns["车主姓名"];
                this.column车牌号 = base.Columns["车牌号"];
                this.column票款合计 = base.Columns["票款合计"];
                this.column其它收入 = base.Columns["其它收入"];
                this.column代理费 = base.Columns["代理费"];
                this.column卸载 = base.Columns["卸载"];
                this.column违约甲 = base.Columns["违约甲"];
                this.column违约乙 = base.Columns["违约乙"];
                this.column快件 = base.Columns["快件"];
                this.column其它1 = base.Columns["其它1"];
                this.column其它2 = base.Columns["其它2"];
                this.column其它3 = base.Columns["其它3"];
                this.column实结金额 = base.Columns["实结金额"];
                this.column大写金额 = base.Columns["大写金额"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column序号 = new global::System.Data.DataColumn("序号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column序号);
                this.column公司名称 = new global::System.Data.DataColumn("公司名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column公司名称);
                this.column车主姓名 = new global::System.Data.DataColumn("车主姓名", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column车主姓名);
                this.column车牌号 = new global::System.Data.DataColumn("车牌号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column车牌号);
                this.column票款合计 = new global::System.Data.DataColumn("票款合计", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column票款合计);
                this.column其它收入 = new global::System.Data.DataColumn("其它收入", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column其它收入);
                this.column代理费 = new global::System.Data.DataColumn("代理费", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column代理费);
                this.column卸载 = new global::System.Data.DataColumn("卸载", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column卸载);
                this.column违约甲 = new global::System.Data.DataColumn("违约甲", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column违约甲);
                this.column违约乙 = new global::System.Data.DataColumn("违约乙", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column违约乙);
                this.column快件 = new global::System.Data.DataColumn("快件", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column快件);
                this.column其它1 = new global::System.Data.DataColumn("其它1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column其它1);
                this.column其它2 = new global::System.Data.DataColumn("其它2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column其它2);
                this.column其它3 = new global::System.Data.DataColumn("其它3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column其它3);
                this.column实结金额 = new global::System.Data.DataColumn("实结金额", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column实结金额);
                this.column大写金额 = new global::System.Data.DataColumn("大写金额", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column大写金额);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 结帐明细表Row New结帐明细表Row() {
                return ((结帐明细表Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 结帐明细表Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(结帐明细表Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.结帐明细表RowChanged != null)) {
                    this.结帐明细表RowChanged(this, new 结帐明细表RowChangeEvent(((结帐明细表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.结帐明细表RowChanging != null)) {
                    this.结帐明细表RowChanging(this, new 结帐明细表RowChangeEvent(((结帐明细表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.结帐明细表RowDeleted != null)) {
                    this.结帐明细表RowDeleted(this, new 结帐明细表RowChangeEvent(((结帐明细表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.结帐明细表RowDeleting != null)) {
                    this.结帐明细表RowDeleting(this, new 结帐明细表RowChangeEvent(((结帐明细表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove结帐明细表Row(结帐明细表Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ImportDataSet ds = new ImportDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "结帐明细表DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 结帐明细表Row : global::System.Data.DataRow {
            
            private 结帐明细表DataTable table结帐明细表;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 结帐明细表Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table结帐明细表 = ((结帐明细表DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 序号 {
                get {
                    try {
                        return ((string)(this[this.table结帐明细表.序号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“结帐明细表”中列“序号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table结帐明细表.序号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 公司名称 {
                get {
                    try {
                        return ((string)(this[this.table结帐明细表.公司名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“结帐明细表”中列“公司名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table结帐明细表.公司名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 车主姓名 {
                get {
                    try {
                        return ((string)(this[this.table结帐明细表.车主姓名Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“结帐明细表”中列“车主姓名”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table结帐明细表.车主姓名Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 车牌号 {
                get {
                    try {
                        return ((string)(this[this.table结帐明细表.车牌号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“结帐明细表”中列“车牌号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table结帐明细表.车牌号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 票款合计 {
                get {
                    try {
                        return ((string)(this[this.table结帐明细表.票款合计Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“结帐明细表”中列“票款合计”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table结帐明细表.票款合计Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 其它收入 {
                get {
                    try {
                        return ((string)(this[this.table结帐明细表.其它收入Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“结帐明细表”中列“其它收入”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table结帐明细表.其它收入Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 代理费 {
                get {
                    try {
                        return ((string)(this[this.table结帐明细表.代理费Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“结帐明细表”中列“代理费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table结帐明细表.代理费Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 卸载 {
                get {
                    try {
                        return ((string)(this[this.table结帐明细表.卸载Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“结帐明细表”中列“卸载”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table结帐明细表.卸载Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 违约甲 {
                get {
                    try {
                        return ((string)(this[this.table结帐明细表.违约甲Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“结帐明细表”中列“违约甲”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table结帐明细表.违约甲Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 违约乙 {
                get {
                    try {
                        return ((string)(this[this.table结帐明细表.违约乙Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“结帐明细表”中列“违约乙”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table结帐明细表.违约乙Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 快件 {
                get {
                    try {
                        return ((string)(this[this.table结帐明细表.快件Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“结帐明细表”中列“快件”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table结帐明细表.快件Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 其它1 {
                get {
                    try {
                        return ((string)(this[this.table结帐明细表.其它1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“结帐明细表”中列“其它1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table结帐明细表.其它1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 其它2 {
                get {
                    try {
                        return ((string)(this[this.table结帐明细表.其它2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“结帐明细表”中列“其它2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table结帐明细表.其它2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 其它3 {
                get {
                    try {
                        return ((string)(this[this.table结帐明细表.其它3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“结帐明细表”中列“其它3”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table结帐明细表.其它3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 实结金额 {
                get {
                    try {
                        return ((string)(this[this.table结帐明细表.实结金额Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“结帐明细表”中列“实结金额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table结帐明细表.实结金额Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 大写金额 {
                get {
                    try {
                        return ((string)(this[this.table结帐明细表.大写金额Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“结帐明细表”中列“大写金额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table结帐明细表.大写金额Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is序号Null() {
                return this.IsNull(this.table结帐明细表.序号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set序号Null() {
                this[this.table结帐明细表.序号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is公司名称Null() {
                return this.IsNull(this.table结帐明细表.公司名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set公司名称Null() {
                this[this.table结帐明细表.公司名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is车主姓名Null() {
                return this.IsNull(this.table结帐明细表.车主姓名Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set车主姓名Null() {
                this[this.table结帐明细表.车主姓名Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is车牌号Null() {
                return this.IsNull(this.table结帐明细表.车牌号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set车牌号Null() {
                this[this.table结帐明细表.车牌号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is票款合计Null() {
                return this.IsNull(this.table结帐明细表.票款合计Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set票款合计Null() {
                this[this.table结帐明细表.票款合计Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is其它收入Null() {
                return this.IsNull(this.table结帐明细表.其它收入Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set其它收入Null() {
                this[this.table结帐明细表.其它收入Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is代理费Null() {
                return this.IsNull(this.table结帐明细表.代理费Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set代理费Null() {
                this[this.table结帐明细表.代理费Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is卸载Null() {
                return this.IsNull(this.table结帐明细表.卸载Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set卸载Null() {
                this[this.table结帐明细表.卸载Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is违约甲Null() {
                return this.IsNull(this.table结帐明细表.违约甲Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set违约甲Null() {
                this[this.table结帐明细表.违约甲Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is违约乙Null() {
                return this.IsNull(this.table结帐明细表.违约乙Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set违约乙Null() {
                this[this.table结帐明细表.违约乙Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is快件Null() {
                return this.IsNull(this.table结帐明细表.快件Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set快件Null() {
                this[this.table结帐明细表.快件Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is其它1Null() {
                return this.IsNull(this.table结帐明细表.其它1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set其它1Null() {
                this[this.table结帐明细表.其它1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is其它2Null() {
                return this.IsNull(this.table结帐明细表.其它2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set其它2Null() {
                this[this.table结帐明细表.其它2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is其它3Null() {
                return this.IsNull(this.table结帐明细表.其它3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set其它3Null() {
                this[this.table结帐明细表.其它3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is实结金额Null() {
                return this.IsNull(this.table结帐明细表.实结金额Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set实结金额Null() {
                this[this.table结帐明细表.实结金额Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is大写金额Null() {
                return this.IsNull(this.table结帐明细表.大写金额Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set大写金额Null() {
                this[this.table结帐明细表.大写金额Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 结帐明细表RowChangeEvent : global::System.EventArgs {
            
            private 结帐明细表Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 结帐明细表RowChangeEvent(结帐明细表Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 结帐明细表Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591